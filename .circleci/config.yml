version: 2
jobs:
  build:
    working_directory: /project

    docker:
      - image: rust

    steps:

      - run:
          name: Install System Packages
          command: |
            apt-get update
            apt-get -y install libsodium18 libsodium-dev pkg-config
            apt-get -y install clang
            apt-get -y install unzip

      - run:
          name: setup nightly
          command: |
            rustup default nightly
            rustup update
            rustup show

      - checkout

      - restore_cache:
          key: suntechsoft-dmarket-blockchain-{{ .Branch }}-{{ checksum "Cargo.lock" }}

      - run:
          name: Build project
          command: |
            export CC=clang
            export CXX=clang++
            cargo update
            cargo build -p dmbc -p dmbc-node -p dmbc-discovery -vv

      - save_cache:
          key: suntechsoft-dmarket-blockchain-{{ .Branch }}-{{ checksum "Cargo.lock" }}
          paths:
            - "/project/target"
            - "/root/.cargo/registry"

#      - run:
#          name: Run Fmt
#          command: rustup run nightly rustfmt --write-mode checkstyle

      - run:
          name: Run Tests
          command: |
            cargo test --color=always

#      - store_artifacts:
#          path: /project/report/
#          destination: artifact-dir

      - run:
          name: Install Coverage Dependencies
          command: |
            wget https://github.com/SimonKagstrom/kcov/archive/v34.zip -O /tmp/kcov.zip
            unzip /tmp/kcov.zip
            cd kcov-v34
            cmake .
            make -j$(nproc)
            make install

      - run:
          name: Generate Coverage
          command: |
            mkdir -p $CIRCLE_ARTIFACTS/target/debug
            kcov --verify --include-path dmbc target/debug/coverage $(find target/debug -maxdepth 1 -type f -executable -name 'transaction-*')
            mv target/debug/coverage $CIRCLE_ARTIFACTS/target/debug

      - setup_remote_docker

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      # build and test application
      - run:
          name: Build and Push api container
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build -t globalgames/dmarket-blockchain .
            docker push globalgames/dmarket-blockchain

#      - run:
#          name: Deploy
#          command: |
#            curl -u ${CIRCLE_API_TOKEN}: \
#               -d build_parameters[CIRCLE_JOB]=deploy \
#               https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
#  deploy:
#    docker:
#      - image: cdrx/rancher-gitlab-deploy
#    working_directory: ~/
#    steps:
#      - run:
#          name: Upgrade services
#          command: |
#            TAG=$CIRCLE_BRANCH
#            ENVIRONMENT=videomarket-uat
#            upgrade --environment $ENVIRONMENT --stack $ENVIRONMENT --service api-cron --new-image globalgames/videomarket_api:latest --no-start-before-stopping
#            upgrade --environment $ENVIRONMENT --stack $ENVIRONMENT --service api --new-image globalgames/videomarket_api:latest --no-start-before-stopping


#      - run:
#          name: Install rancher cli
#          command: |
#            apt-get -y install python-setuptools
#            set -x
#            curl -L -o /tmp/deploy.tgz https://github.com/cdrx/rancher-gitlab-deploy/archive/1.3.tar.gz
#            tar -xz -C /tmp -f /tmp/deploy.tgz
#            cd /tmp/rancher-gitlab-deploy-1.3/ && python setup.py install
#            ln -s /usr/local/bin/rancher-gitlab-deploy /usr/local/bin/upgrade
#            TAG=$CIRCLE_BRANCH
#            ENVIRONMENT=videomarket-uat
#            upgrade --environment $ENVIRONMENT --stack $ENVIRONMENT --service api --new-image globalgames/videomarket_api:latest --no-start-before-stopping
#            upgrade --environment $ENVIRONMENT --stack $ENVIRONMENT --service nginx --no-start-before-stopping
